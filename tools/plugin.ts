import { walk } from 'std/fs/mod.ts';
import { join, toFileUrl } from 'std/path/mod.ts';
import { colors } from 'cliffy/ansi/colors.ts';
import { Command } from 'cliffy/command/mod.ts';

const plug_name = (plugin: string) => `plug_${plugin.replace('.', '_')}`;

const mod_gen = async (dir: string, plugins: string[]) => {
  const lines: string[] = [];
  lines.push('/// DO NOT EDIT THIS FILE! Auto generated by `plugin_export`')
  lines.push('');
  lines.push(`import { plugin_t } from '@utils/types.ts';`);
  plugins.forEach(p => {
    lines.push(`import ${plug_name(p)} from './${p}/mod.ts';`);
  });

  lines.push('');
  lines.push('const plugins: plugin_t[] = [');
  lines.push(...plugins.map(p => `  ${plug_name(p)},`));
  lines.push('];');
  lines.push('');

  lines.push('export default plugins;');

  const code = lines.join('\n');
  await Deno.writeTextFile(`${dir}/mod.ts`, code);
}

export const plugin_export = async (plugin_dir: string) => {
  const plugins: string[] = [];

  const entrys = walk(plugin_dir, {
    maxDepth: 1,
    includeFiles: false,
    followSymlinks: true,
  });
  for await (const entry of entrys) {
    if (entry.path == plugin_dir) continue;
    if (entry.name.startsWith('_')) continue;

    try {
      const module_path = toFileUrl(join(entry.path, 'mod.ts')).toString();
      const module = await import(module_path);
      const { id, matches, cmd } = module.default;
      if (typeof id != 'string' || id.length == 0) throw new Error('invalid id');
      if (!Array.isArray(matches) || !matches.every(m => typeof m == 'string')) throw new Error('invalid matches');
      if (!(cmd instanceof Command)) throw new Error('invalid command');
      plugins.push(entry.name);
      console.log('module:', id);
    } catch (err) {
      console.log(colors.dim(`invalid plugin: ${entry.path}, ${err}`));
    }
  }

  await mod_gen(plugin_dir, plugins);
}

if (import.meta.main) {
  new Command()
    .name('plugin_export')
    .version('0.0.1')
    .description('export plugin definitions mod')
    .arguments('<dir:string>')
    .action(async (_opts, dir) => {
      const plugin_dir = await Deno.realPath(dir);
      const stat = await Deno.stat(plugin_dir);
      if (!stat.isDirectory) {
        console.log(`${plugin_dir} is not a dir`);
        return;
      }
      await plugin_export(plugin_dir);
    })
    .parse();
}